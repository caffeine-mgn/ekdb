buildscript {
//    ext.ktor_version = '1.3.2'
    ext.binom_version="0.1.22"
    ext.kotlin_version = "1.4.10"
    ext.vertx_version = '3.4.2'
    ext.qunitjsVersion = '2.4.0'
    ext.hibernate_version = '5.3.6.Final'
    ext.tl_version = "${new Date().getYear() + 1900}.${new Date().getMonth() + 1}"
    ext.junit_version = '4.12'
    ext.poi_version = "3.17"
    ext.postgresql_version = "42.2.8"
    ext.hazelcast_version = "4.0.1"
    ext.json_io_version = "4.10.0"
    ext.groovy_version = "3.0.5"
    ext.jcache_version = "1.1.0"
    ext.undertow_version = "1.4.12.Final"
    ext.strong_version = "1.0.12"
    ext.css_version = "1.0.4"
    ext.svg_version = "1.0.5"
    ext.jackson_version = "2.9.6"
    ext.h2_version = "1.4.193"
    ext.javaee_api_version = "8.0"
    ext.hikari_version = '3.1.0'
    ext.node_stage_version = '1.0.5'
    ext.mapdb_version = '3.0.7'
    ext.amqp_client_version = "5.5.2"
    ext.mysql_driver = "8.0.16"
    ext.tomcat_version="10.0.0-M3"
    ext.serialization_version='1.0.0-RC2'

    ext.spring_boot_version = '2.0.4.RELEASE'
    ext.spring_version = "5.1.5.RELEASE"

    def repoUser = System.getenv("REPO_USER")
    def repoPassword = System.getenv("REPO_PASSWORD")

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        
        maven {
            url 'https://maven.google.com'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'http://dl.bintray.com/kotlin/kotlin-dev'
        }
        maven {
            url "http://repo.binom.pw/releases"

//            credentials {
//                username = repoUser?:""
//                password = repoPassword == null ? "" : repoPassword
//            }
        }
    }

    dependencies {
        classpath group: 'com.bmuschko', name: 'gradle-docker-plugin', version: '3.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
//        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath group: 'org.zeroturnaround', name: 'gradle-jrebel-plugin', version: '1.1.3'
//        classpath group: 'org.tlsys', name: 'js-resource-builder', version: '1.0'
        classpath 'edu.sc.seis.gradle:launch4j:2.3.0'
//        classpath 'org.tlsys:plugin-deployer:1.0'
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "com.eriwen:gradle-js-plugin:1.12.1"
        classpath "gradle.plugin.com.rfksystems:gmdoc:1.0.1"
//        classpath "gradle.plugin.synapticloop:templar-gen:1.5.0"
//        classpath 'com.android.tools.build:gradle:3.5.0'
    }
}

//apply plugin: 'idea'
//apply plugin: "java"

def repoUser = System.getenv("REPO_USER")
def repoPassword = System.getenv("REPO_PASSWORD")

allprojects {
//    group = "org.tlsys"
//    sourceCompatibility = JavaVersion.VERSION_1_8
//    targetCompatibility = JavaVersion.VERSION_1_8
//    compileJava.options.encoding = 'UTF-8'
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'http://dl.bintray.com/kotlin/kotlin-dev'
        }
        maven {
            url "https://repo.binom.pw/releases"

//            credentials {
//                username = repoUser
//                password = repoPassword == null ? "" : repoPassword
//            }
        }
        maven { url 'https://jitpack.io' }
        maven {
            url "https://repo.spring.io/milestone/"
        }
        maven {
            url 'https://maven.google.com'
        }
        maven { url "https://dl.bintray.com/kotlin/ktor" }
        maven { url "https://dl.bintray.com/kotlin/kotlinx/" }
        maven { url "https://dl.bintray.com/kotlin/exposed" }
    }
    if (System.getenv("BUILD_NUMBER") != null)
        version = tl_version + "." + System.getenv("BUILD_NUMBER")
    else if (System.getenv("GO_TO_REVISION") != null)
        version = tl_version + "." + System.getenv("GO_TO_REVISION")
    else
        version = tl_version
}

def copy = { File src, File dest ->

    def input = src.newDataInputStream()
    def output = dest.newDataOutputStream()

    output << input

    input.close()
    output.close()
}

//task dep {
//    for (t in project.getTasksByName("wildflyModuleCopy", true))
//        for (v in t.project.getTasksByName("build", false))
//            dependsOn v;
//
//    for (t in project.getTasksByName("redeployWildfly", true))
//        for (v in t.project.getTasksByName("build", false))
//            dependsOn v;
//    doLast {
//        File out = new File(project.getProjectDir(), "to_server");
//        if (out.isDirectory())
//            out.deleteDir();
//        out.mkdir();
//
//
//
//        println "out dir " + out;
//
//        //deployTasks.addAll();
//
//
//        def PrintStream modulsScript = new PrintStream(new FileOutputStream(new File(out, "moduls.sh")));
//        modulsScript.append("#!/bin/sh\n")
//
//        def Set<Task> modulsTasks = project.getTasksByName("wildflyModuleCopy", true);
//
//        if (!modulsTasks.isEmpty()) {
//            File modulsFile = new File(out, "modules");
//            new File(modulsFile, "system/layers/base").mkdirs()
//            modulsFile.mkdir();
//            for (Task t in modulsTasks) {
//
//                def File f = t.module;
//                //println "File " + f.getAbsolutePath() + " =>" + f.isFile();
//
//                /*
//                for (v in t.project.getTasksByName("build", false))
//                    dependsOn v;
//                */
//                t.wildflyHome = out;
//                t.execute();
//                //dependsOn t;
//            }
//            modulsScript.append('cp -f -r ' + modulsFile.getName() + ' $WILDFLY_HOME\n')
//
//            modulsScript.append('$WILDFLY_HOME/bin/jboss-cli.sh --connect --command=":shutdown(restart=true)"')
//
//        }
//
//        def PrintStream beansScript = new PrintStream(new FileOutputStream(new File(out, "beans.sh")));
//        beansScript.append("#!/bin/sh\n")
//
//        def Set<Task> deployTasks = project.getTasksByName("redeployWildfly", true);
//        deployTasks.addAll(project.getTasksByName("deployWildfly", true));
//        beansScript.append('$WILDFLY_HOME/bin/jboss-cli.sh --connect --commands="')
//        def boolean first = true;
//        for (t in deployTasks) {
//            def outLibFile = t.project.redeployWildfly.application;
//            /*
//            for (v in t.project.getTasksByName("build", false))
//                dependsOn v;
//                */
//            copy(
//                    t.project.redeployWildfly.file,
//                    new File(out, outLibFile)
//            );
//            if (first) {
//                beansScript.append(',')
//                first = false
//            }
//
//            beansScript.append('deploy ./' + outLibFile + ' --force')
//            println t.project.toString() + " => " + t.project.redeployWildfly.application;
//        }
//        beansScript.append('"')
//
//        beansScript.close();
//    }
//
//}